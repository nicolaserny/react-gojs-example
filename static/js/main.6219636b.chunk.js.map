{"version":3,"sources":["logo.svg","actions/diagram.ts","components/AppButtons.tsx","components/MyDiagram.tsx","reducers/diagramReducer.ts","components/MyDiagramContainer.tsx","components/SelectionDetails.tsx","App.tsx","registerServiceWorker.ts","store.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","actionCreator","actionCreatorFactory","init","updateNodeColor","UpdateNodeText","addNode","removeNode","removeLink","nodeSelected","nodeDeselected","connect","state","Object","objectSpread","dispatch","nodeId","initHandler","nodeDataArray","key","label","color","linkDataArray","from","to","updateNodeColorHandler","addNodeHandler","_ref","react_default","a","createElement","className","type","onClick","MyDiagram","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createDiagram","bind","assertThisInitialized","onTextEdited","dist","diagramId","model","onModelChange","_this2","$","go","GraphObject","make","myDiagram","Diagram","initialContentAlignment","Spot","LeftCenter","layout","TreeLayout","angle","arrangement","ArrangementVertical","treeStyle","StyleLayered","isReadOnly","allowHorizontalScroll","allowVerticalScroll","allowZoom","allowSelect","autoScale","Uniform","contentAlignment","TextEdited","toolManager","panningTool","isEnabled","mouseWheelBehavior","ToolManager","WheelScroll","nodeTemplate","Node","selectionChanged","node","onNodeSelection","isSelected","Shape","strokeWidth","Binding","TextBlock","margin","editable","e","tb","subject","part","onTextChange","text","React","PureComponent","colors","getRandomColor","Math","floor","random","length","diagramReducer","reducerWithInitialState","selectedNodeKeys","case","payload","updatedNodes","map","nodeIndex","findIndex","concat","toConsumableArray","slice","linksToAdd","parent","nodeToRemoveIndex","linkToRemoveIndex","link","nodeIndexToRemove","build","modelSelector","nodeSelectionSelector","event","eventType","ModelChangeEventType","Remove","nodeData","linkData","src_components_MyDiagram","nodes","message","reduce","result","current","logo","require","App","src","alt","components_AppButtons","components_SelectionDetails","components_MyDiagramContainer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","mainReducer","gojsKey","process","licenseKey","ReactDOM","render","es","store","createStore","applyMiddleware","apply","src_App_0","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6219636b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { actionCreatorFactory } from 'typescript-fsa';\nimport { NodeModel } from '../reducers/diagramReducer';\nimport { DiagramModel, LinkModel } from 'react-gojs';\n\nconst actionCreator = actionCreatorFactory('DIAGRAM');\n\nexport interface UpdateNodeTextEvent {\n    key: string;\n    text: string;\n}\n\nexport const init = actionCreator<DiagramModel<NodeModel, LinkModel>>('INIT');\nexport const updateNodeColor = actionCreator('UPDATE_NODE_COLOR');\nexport const UpdateNodeText = actionCreator<UpdateNodeTextEvent>('UPDATE_NODE_TEXT');\nexport const addNode = actionCreator<string>('ADD_NODE');\nexport const removeNode = actionCreator<string>('REMOVE_NODE');\nexport const removeLink = actionCreator<LinkModel>('REMOVE_LINK');\nexport const nodeSelected = actionCreator<string>('NODE_SELECTED');\nexport const nodeDeselected = actionCreator<string>('NODE_DESELECTED');\n","import React from 'react';\nimport { DiagramState, NodeModel } from '../reducers/diagramReducer';\nimport { connect } from 'react-redux';\nimport { init, updateNodeColor, addNode } from '../actions/diagram';\nimport { Action } from 'typescript-fsa';\nimport { DiagramModel, LinkModel } from 'react-gojs';\nimport { Dispatch } from 'redux';\n\nexport interface AppButtonsDispatchProps {\n    initHandler: () => void;\n    updateNodeColorHandler: () => void;\n    addNodeHandler: () => void;\n}\n\nconst mapStateToProps = (state: DiagramState) => {\n    return {\n        ...state\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<Action<DiagramModel<NodeModel, LinkModel>> | Action<void> | Action<string>>\n): AppButtonsDispatchProps => {\n    let nodeId = 0;\n    return {\n        initHandler: () =>\n            dispatch(\n                init({\n                    nodeDataArray: [\n                        { key: 'Alpha', label: 'Alpha', color: 'lightblue' },\n                        { key: 'Beta', label: 'Beta', color: 'orange' },\n                        { key: 'Gamma', label: 'Gamma', color: 'lightgreen' },\n                        { key: 'Delta', label: 'Delta', color: 'pink' },\n                        { key: 'Omega', label: 'Omega', color: 'grey' }\n                    ],\n                    linkDataArray: [\n                        { from: 'Alpha', to: 'Beta' },\n                        { from: 'Alpha', to: 'Gamma' },\n                        { from: 'Beta', to: 'Delta' },\n                        { from: 'Gamma', to: 'Omega' }\n                    ]\n                })\n            ),\n        updateNodeColorHandler: () => dispatch(updateNodeColor()),\n        addNodeHandler: () => {\n            dispatch(addNode('node' + nodeId));\n            nodeId += 1;\n        }\n    };\n};\n\nconst AppButtons = ({ initHandler, updateNodeColorHandler, addNodeHandler }: AppButtonsDispatchProps) => {\n    return (\n        <div className=\"centered-container\">\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={() => initHandler()}>\n                    Init diagram\n                </button>\n            </div>\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={() => updateNodeColorHandler()}>\n                    Update node color\n                </button>\n            </div>\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={() => addNodeHandler()}>\n                    Add node with selected node(s) as parent(s)\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AppButtons);\n","import React from 'react';\nimport go from 'gojs';\nimport { Diagram, ToolManager } from 'gojs';\nimport { NodeModel } from '../reducers/diagramReducer';\nimport { DiagramModel, LinkModel, GojsDiagram, ModelChangeEvent } from 'react-gojs';\nimport './MyDiagram.css';\nimport { UpdateNodeTextEvent } from '../actions/diagram';\n\ninterface MyDiagramProps {\n    model: DiagramModel<NodeModel, LinkModel>;\n    onNodeSelection: (key: string, isSelected: boolean) => void;\n    onModelChange: (event: ModelChangeEvent<NodeModel, LinkModel>) => void;\n    onTextChange: (event: UpdateNodeTextEvent) => void;\n}\n\nclass MyDiagram extends React.PureComponent<MyDiagramProps> {\n    constructor(props: MyDiagramProps) {\n        super(props);\n        this.createDiagram = this.createDiagram.bind(this);\n        this.onTextEdited = this.onTextEdited.bind(this);\n    }\n    render() {\n        return (\n            <GojsDiagram\n                diagramId=\"myDiagramDiv\"\n                model={this.props.model}\n                createDiagram={this.createDiagram}\n                className=\"myDiagram\"\n                onModelChange={this.props.onModelChange}\n            />\n        );\n    }\n\n    private createDiagram(diagramId: string): Diagram {\n        const $ = go.GraphObject.make;\n\n        const myDiagram: Diagram = $(go.Diagram, diagramId, {\n            initialContentAlignment: go.Spot.LeftCenter,\n            layout: $(go.TreeLayout, {\n                angle: 0,\n                arrangement: go.TreeLayout.ArrangementVertical,\n                treeStyle: go.TreeLayout.StyleLayered\n            }),\n            isReadOnly: false,\n            allowHorizontalScroll: true,\n            allowVerticalScroll: true,\n            allowZoom: false,\n            allowSelect: true,\n            autoScale: Diagram.Uniform,\n            contentAlignment: go.Spot.LeftCenter,\n            TextEdited: this.onTextEdited\n        });\n\n        myDiagram.toolManager.panningTool.isEnabled = false;\n        myDiagram.toolManager.mouseWheelBehavior = ToolManager.WheelScroll;\n\n        myDiagram.nodeTemplate = $(\n            go.Node,\n            'Auto',\n            {\n                selectionChanged: node => this.props.onNodeSelection(node.key as string, node.isSelected)\n            },\n            $(go.Shape, 'RoundedRectangle', { strokeWidth: 0 }, new go.Binding('fill', 'color')),\n            $(go.TextBlock, { margin: 8, editable: true }, new go.Binding('text', 'label'))\n        );\n\n        return myDiagram;\n    }\n\n    private onTextEdited(e: go.DiagramEvent) {\n        const tb = e.subject;\n        if (tb === null) {\n            return;\n        }\n        const node = tb.part;\n        if (node instanceof go.Node && this.props.onTextChange) {\n            this.props.onTextChange({ key: node.key as string, text: tb.text });\n        }\n    }\n}\n\nexport default MyDiagram;\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { Reducer } from 'redux';\nimport {\n    init,\n    updateNodeColor,\n    addNode,\n    nodeSelected,\n    nodeDeselected,\n    removeNode,\n    removeLink,\n    UpdateNodeText,\n    UpdateNodeTextEvent\n} from '../actions/diagram';\nimport { BaseNodeModel, DiagramModel, LinkModel } from 'react-gojs';\n\nexport interface DiagramState {\n    model: DiagramModel<NodeModel, LinkModel>;\n    selectedNodeKeys: string[];\n}\n\nexport interface NodeModel extends BaseNodeModel {\n    label: string;\n    color: string;\n}\n\nconst initHandler = (state: DiagramState, payload: DiagramModel<NodeModel, LinkModel>): DiagramState => {\n    return {\n        ...state,\n        model: payload\n    };\n};\n\nconst colors = ['lightblue', 'orange', 'lightgreen', 'pink', 'yellow', 'red', 'grey', 'magenta', 'cyan'];\n\nconst getRandomColor = () => {\n    return colors[Math.floor(Math.random() * colors.length)];\n};\n\nconst updateNodeColorHandler = (state: DiagramState): DiagramState => {\n    const updatedNodes = state.model.nodeDataArray.map(node => {\n        return {\n            ...node,\n            color: getRandomColor()\n        };\n    });\n\n    return {\n        ...state,\n        model: {\n            ...state.model,\n            nodeDataArray: updatedNodes\n        }\n    };\n};\n\nconst updateNodeTextHandler = (state: DiagramState, payload: UpdateNodeTextEvent): DiagramState => {\n    const nodeIndex = state.model.nodeDataArray.findIndex(node => node.key === payload.key);\n\n    return {\n        ...state,\n        model: {\n            ...state.model,\n            nodeDataArray: [\n                ...state.model.nodeDataArray.slice(0, nodeIndex),\n                {\n                    ...state.model.nodeDataArray[nodeIndex],\n                    label: payload.text\n                },\n                ...state.model.nodeDataArray.slice(nodeIndex + 1)\n            ]\n        }\n    };\n};\n\nconst addNodeHandler = (state: DiagramState, payload: string): DiagramState => {\n    const linksToAdd: LinkModel[] = state.selectedNodeKeys.map(parent => {\n        return { from: parent, to: payload };\n    });\n    return {\n        ...state,\n        model: {\n            ...state.model,\n            nodeDataArray: [...state.model.nodeDataArray, { key: payload, label: payload, color: getRandomColor() }],\n            linkDataArray:\n                linksToAdd.length > 0\n                    ? [...state.model.linkDataArray].concat(linksToAdd)\n                    : [...state.model.linkDataArray]\n        }\n    };\n};\n\nconst removeNodeHandler = (state: DiagramState, payload: string): DiagramState => {\n    const nodeToRemoveIndex = state.model.nodeDataArray.findIndex(node => node.key === payload);\n    if (nodeToRemoveIndex === -1) {\n        return state;\n    }\n    return {\n        ...state,\n        model: {\n            ...state.model,\n            nodeDataArray: [\n                ...state.model.nodeDataArray.slice(0, nodeToRemoveIndex),\n                ...state.model.nodeDataArray.slice(nodeToRemoveIndex + 1)\n            ]\n        }\n    };\n};\n\nconst removeLinkHandler = (state: DiagramState, payload: LinkModel): DiagramState => {\n    const linkToRemoveIndex = state.model.linkDataArray.findIndex(\n        link => link.from === payload.from && link.to === payload.to\n    );\n    if (linkToRemoveIndex === -1) {\n        return state;\n    }\n    return {\n        ...state,\n        model: {\n            ...state.model,\n            linkDataArray: [\n                ...state.model.linkDataArray.slice(0, linkToRemoveIndex),\n                ...state.model.linkDataArray.slice(linkToRemoveIndex + 1)\n            ]\n        }\n    };\n};\n\nconst nodeSelectedHandler = (state: DiagramState, payload: string): DiagramState => {\n    return {\n        ...state,\n        selectedNodeKeys: [...state.selectedNodeKeys, payload]\n    };\n};\n\nconst nodeDeselectedHandler = (state: DiagramState, payload: string): DiagramState => {\n    const nodeIndexToRemove = state.selectedNodeKeys.findIndex(key => key === payload);\n    if (nodeIndexToRemove === -1) {\n        return state;\n    }\n    return {\n        ...state,\n        selectedNodeKeys: [\n            ...state.selectedNodeKeys.slice(0, nodeIndexToRemove),\n            ...state.selectedNodeKeys.slice(nodeIndexToRemove + 1)\n        ]\n    };\n};\n\nexport const diagramReducer: Reducer<DiagramState> = reducerWithInitialState<DiagramState>({\n    model: {\n        nodeDataArray: [{ key: 'Root', color: 'lightblue', label: 'Root' }],\n        linkDataArray: []\n    },\n    selectedNodeKeys: []\n})\n    .case(init, initHandler)\n    .case(updateNodeColor, updateNodeColorHandler)\n    .case(UpdateNodeText, updateNodeTextHandler)\n    .case(addNode, addNodeHandler)\n    .case(removeNode, removeNodeHandler)\n    .case(removeLink, removeLinkHandler)\n    .case(nodeSelected, nodeSelectedHandler)\n    .case(nodeDeselected, nodeDeselectedHandler)\n    .build();\n\nexport const modelSelector = (state: DiagramState) => state.model;\nexport const nodeSelectionSelector = (state: DiagramState) => state.selectedNodeKeys;\n","import React from 'react';\nimport MyDiagram from './MyDiagram';\nimport { DiagramState, modelSelector, NodeModel } from '../reducers/diagramReducer';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport {\n    nodeSelected,\n    nodeDeselected,\n    removeNode,\n    removeLink,\n    UpdateNodeTextEvent,\n    UpdateNodeText\n} from '../actions/diagram';\nimport { DiagramModel, LinkModel, ModelChangeEvent, ModelChangeEventType } from 'react-gojs';\nimport { Action } from 'typescript-fsa';\n\ninterface MyDiagramContainerStateProps {\n    model: DiagramModel<NodeModel, LinkModel>;\n}\n\ninterface MyDiagramContainerDispatchProps {\n    onNodeSelection: (key: string, isSelected: boolean) => void;\n    onModelChange: (event: ModelChangeEvent<NodeModel, LinkModel>) => void;\n    onTextChange: (event: UpdateNodeTextEvent) => void;\n}\n\nconst mapStateToProps = (state: DiagramState) => {\n    return {\n        model: modelSelector(state)\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<Action<string> | Action<LinkModel> | Action<UpdateNodeTextEvent>>\n): MyDiagramContainerDispatchProps => {\n    return {\n        onNodeSelection: (key: string, isSelected: boolean) => {\n            if (isSelected) {\n                dispatch(nodeSelected(key));\n            } else {\n                dispatch(nodeDeselected(key));\n            }\n        },\n        onModelChange: (event: ModelChangeEvent<NodeModel, LinkModel>) => {\n            switch (event.eventType) {\n                case ModelChangeEventType.Remove:\n                    if (event.nodeData) {\n                        dispatch(removeNode(event.nodeData.key));\n                    }\n                    if (event.linkData) {\n                        dispatch(removeLink(event.linkData));\n                    }\n                    break;\n                default:\n                    break;\n            }\n        },\n        onTextChange: (event: UpdateNodeTextEvent) => {\n            dispatch(UpdateNodeText(event));\n        }\n    };\n};\n\nconst MyDiagramContainer = ({\n    model,\n    onNodeSelection,\n    onModelChange,\n    onTextChange\n}: MyDiagramContainerStateProps & MyDiagramContainerDispatchProps) => {\n    return (\n        <MyDiagram\n            model={model}\n            onNodeSelection={onNodeSelection}\n            onModelChange={onModelChange}\n            onTextChange={onTextChange}\n        />\n    );\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MyDiagramContainer);\n","import React from 'react';\nimport { DiagramState, nodeSelectionSelector } from '../reducers/diagramReducer';\nimport { connect } from 'react-redux';\n\ninterface SelectionDetailsStateProps {\n    nodes: string[];\n}\n\nconst mapStateToProps = (state: DiagramState): SelectionDetailsStateProps => {\n    return {\n        nodes: nodeSelectionSelector(state)\n    };\n};\n\nconst SelectionDetails = ({ nodes }: SelectionDetailsStateProps) => {\n    const message = nodes.reduce((result: string, current: string) => result + ' ' + current, '');\n    return <div>{nodes.length === 0 ? 'No selection' : 'Selection: ' + message}</div>;\n};\n\nexport default connect(mapStateToProps)(SelectionDetails);\n","import React from 'react';\nimport './App.css';\nimport AppButtons from './components/AppButtons';\nimport MyDiagramContainer from './components/MyDiagramContainer';\nimport SelectionDetails from './components/SelectionDetails';\n\nconst logo = require('./logo.svg');\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1 className=\"App-title\">React + Redux + GoJS Example</h1>\n                </header>\n                <AppButtons />\n                <SelectionDetails />\n                <MyDiagramContainer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (!isLocalhost) {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            } else {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\n                                    'New content is available; please refresh.'\n                                );\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\n                                    'Content is cached for offline use.'\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type')!.indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { createStore, applyMiddleware, Middleware } from 'redux';\n\nexport const create = mainReducer => {\n    const middlewares: Array<Middleware> = [];\n\n    if (process.env.NODE_ENV !== `production`) {\n        const { logger } = require(`redux-logger`);\n        middlewares.push(logger);\n    }\n\n    const store = createStore(mainReducer, applyMiddleware(...middlewares));\n    return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { create } from './store';\nimport { diagramReducer } from './reducers/diagramReducer';\nimport go from 'gojs';\n\nconst gojsKey = process.env.REACT_APP_GOJS_KEY;\n\nif (gojsKey) {\n    // tslint:disable-next-line:no-any\n    (go as any).licenseKey = gojsKey;\n}\n\nReactDOM.render(\n    <Provider store={create(diagramReducer)}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}